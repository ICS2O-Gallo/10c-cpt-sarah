import arcade


WIDTH = 640
HEIGHT = 480

current_screen = "menu"

ball_x = 0

def update(delta_time):
   global ball_x

   if current_screen == "play":
       ball_x += 1


def on_draw():
   arcade.start_render()
   # Draw in here...
   if current_screen == "menu":
       arcade.set_background_color(arcade.color.BLUE_GRAY)
       arcade.draw_text("Main Menu", WIDTH / 2, HEIGHT / 2, arcade.color.BLACK)
   elif current_screen == "instructions":
       arcade.set_background_color(arcade.color.ORANGE)
       arcade.draw_text("Intstruction Screen", WIDTH/2, HEIGHT/2, arcade.color.BLACK)
   elif current_screen == "play":
       arcade.set_background_color(arcade.color.OLIVE_DRAB)
       arcade.draw_text("Play Screen", WIDTH/2, HEIGHT/2, arcade.color.BLACK)


def on_key_press(key, modifiers):
   global current_screen
   if current_screen == "menu":
       if key == arcade.key.I:
           current_screen = "instructions"
       elif key == arcade.key.P:
           current_screen == "play"
   elif current_screen == "instructions":
        if key == arcade.key.I:
            current_screen = "instructions"

def on_key_release(key, modifiers):
   pass


def on_mouse_press(x, y, button, modifiers):
   pass


def setup():
   arcade.open_window(WIDTH, HEIGHT, "My Arcade Game")
   arcade.set_background_color(arcade.color.WHITE)
   arcade.schedule(update, 1/60)

   # Override arcade window methods
   window = arcade.get_window()
   window.on_draw = on_draw
   window.on_key_press = on_key_press
   window.on_key_release = on_key_release
   window.on_mouse_press = on_mouse_press

   arcade.run()


def draw_menu():
   arcade.set_background_color(arcade.color.WHITE_SMOKE)
   arcade.draw_text("Main Menu", WIDTH/2, HEIGHT/2,
                    arcade.color.BLACK, font_size=30, anchor_x="center")
   arcade.draw_text("I for Instructions", WIDTH/2, HEIGHT/2-60,
                    arcade.color.BLACK, font_size=20, anchor_x="center")
   arcade.draw_text("P to Play", WIDTH/2, HEIGHT/2-90,
                    arcade.color.BLACK, font_size=20, anchor_x="center")


def draw_instructions():
   arcade.set_background_color(arcade.color.BLUE_GRAY)
   arcade.draw_text("Instructions", WIDTH/2, HEIGHT/2,
                    arcade.color.BLACK, font_size=30, anchor_x="center")
   arcade.draw_text("ESC to go back", WIDTH/2, HEIGHT/2-60,
                    arcade.color.BLACK, font_size=20, anchor_x="center")


def draw_play():
   arcade.set_background_color(arcade.color.ORANGE_RED)
   arcade.draw_text("Play", WIDTH/2, HEIGHT/2,
                    arcade.color.BLACK, font_size=30, anchor_x="center")

   arcade.draw_circle_filled(ball_x, 100, 30, arcade.color.WHITE)


if __name__ == '__main__':
   setup()

def draw():
    print("Do you want to play?")

""" 
intro = You wake up to a scream coming from you parents' bedroom and you see a dark shadow holding a knife standing 
before them through the crack of your bedroom door. There's no one else in the house except your new adopted brother 
and you think he killed them. 

question1 = You must avenge them. What do you do?: A: You hide in your room and wait until he leaves to call 911. B: 
You follow him and ask him why he did it. C: You find something heavy to hit him over the head with.

response = int(input("What do you want to do?"))
if response == a 
    print("Sorry he found you in your room and now wants to kill you to get rid of witnesses.")
elif response == b 
    print("He got away before you could ask him. Do you wish to continue or do you give up?")
elif response == c
    print("He fell over and he's now unconcious. What do you do now?")
else: Invalid answer please try again.")

question2 = 
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question3 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question4 = "You're chasing the killer in a house. He's ahead of you and there are 2 doors which one do you pick? A: T
he door on the right. B: The door on the left. C: None, you take the route around the doors to arrive at the destination
before him."

response == int(input"Pick your next move: "))
if response = a
    print("You've picked the wrong option and the killer got out. Do you want to continue or do you quit?"
elif response == b
    print("You saw the killer's footprints! ")
elif response == c 
    print("Sorry you picked the wrong choice and the killer got away.")
    break   
else: Invalid answer please try again.")

question5 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question6 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question7 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question8 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question9 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

question10 =
response == int(input"Pick your next move: "))
if response = a
    print("")
elif response == b
    print("")
elif response == c 
    print("")
    break   
else: Invalid answer please try again.")

"""

def on_key_press(key, modifiers):
    pass


def on_key_release(key, modifiers):
    pass


def on_mouse_press(x, y, button, modifiers):
    pass


if __name__ == '__main__':
    setup()
